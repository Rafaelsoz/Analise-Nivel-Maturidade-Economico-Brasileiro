# -*- coding: utf-8 -*-
"""REGIONAL_ECONOMIC_LEVEL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m4qaO81OHWSSVKtZnpXcCxpabFfUJj28

# **Load Dependences**
"""

!pip install unidecode
!pip install geopandas

"""# **Imports**

"""

import json
import warnings

import pandas as pd
import geopandas as gpd
import numpy as np

import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib as mpl
import plotly.graph_objects as go
import plotly.express as px

from pprint import pprint

# Function to remove special characters
from unidecode import unidecode

from tqdm.notebook import tqdm, trange

# Feature Importance
from sklearn.feature_selection import mutual_info_classif, chi2

my_palette = sns.diverging_palette(230, 20, as_cmap=False)
sns.set_theme(style="ticks", palette=my_palette)

"""# **Load Datasets**"""

#@title Download Dataset from GDrive
# Economic Level
!gdown 1hkzJTRxUQKvyqrw30rIpmrA1ZoiVd1oJ


df = pd.read_csv('results_scrapper_PCDII.csv', index_col=0)
df.columns = [key.replace(' ','_').capitalize() for key in df.columns]

df.rename(columns={'Nivel_economica':'Nivel_economico'}, inplace=True)

#@title Download Dataset from IBGE
#@markdown [All forms Brazil Shapefiles](https://www.ibge.gov.br/en/geosciences/territorial-organization/territorial-meshes/18890-municipal-mesh.html)

!wget https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2021/Brasil/BR/BR_Municipios_2021.zip

!unzip BR_Municipios_2021.zip

# Load the shapefiles of the cities
shapefile_path = '/content/BR_Municipios_2021.shp'
gdf = gpd.read_file(shapefile_path)
# geojson_data = gdf.to_json()

#@title Download UF shapefiles from IBGE

!wget https://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2021/Brasil/BR/BR_UF_2021.zip

!unzip BR_UF_2021.zip

# Load the shapefiles of the cities
shapefile_path = '/content/BR_UF_2021.shp'
uf_gdf = gpd.read_file(shapefile_path)

#@title Color Frame
color_frame = gdf['CD_MUN'].astype(int)

aux_df = df[['Codigo', 'Nivel_economico']]
aux_df.rename(columns={'Codigo':'CD_MUN'}, inplace=True)

color_frame = pd.merge(aux_df, color_frame, how='right', on='CD_MUN')

# Vai de 1 a 7, os valores 0 são os não encontrados na base do governo
color_frame = color_frame.fillna(0)

color_frame['Nivel_economico'] = color_frame['Nivel_economico'].astype(int)


# Definir a paleta de cores 'coolwarm'
cmap = plt.get_cmap('coolwarm', 9)
color_frame['Color'] = color_frame['Nivel_economico'].apply(lambda x: cmap(x))

"""# **Pre-Processing**"""

#@title Dataframe without NaN values
df.info()

#@title Describe dataset with summary measures
df.iloc[:, 5:].describe()

#@title View dataset struct
df.head()

#@title Rename dataset keys
#@markdown Remove special characters from the features names

df = df.rename(columns={key: unidecode(key).replace(' ', '_') for key in df.keys()})

#@title Get state and city in dataframe
#@markdown Separate State and City from the Municipio attribute

def format_city(city: str):

  city_without_special_charac = unidecode(city)

  city_capitalize = city_without_special_charac.capitalize()

  return city_capitalize

# Get nome of the cities
df['Municipio'] = df['Nome'].str.extract(r'^(.+?) \(')
df['Municipio'] = df['Municipio'].apply(lambda x: format_city(x))

# Get state of the cities
df['Estado'] = df['Nome'].str.extract(r'\((\w+)\)')

# Drop old columns
df = df.drop(columns=['Tag', 'Nome'])

# Reorder the columns
df = df[df.columns[-2:].tolist() + df.columns[:-2].tolist()]

#@title Add region in Dataframe
state_to_region = {
    'AC': 'Norte', 'AL': 'Nordeste', 'AP': 'Norte', 'AM': 'Norte', 'BA': 'Nordeste',
    'CE': 'Nordeste', 'DF': 'Centro-Oeste', 'ES': 'Sudeste', 'GO': 'Centro-Oeste',
    'MA': 'Nordeste', 'MT': 'Centro-Oeste', 'MS': 'Centro-Oeste', 'MG': 'Sudeste',
    'PA': 'Norte', 'PB': 'Nordeste', 'PR': 'Sul', 'PE': 'Nordeste', 'PI': 'Nordeste',
    'RJ': 'Sudeste', 'RN': 'Nordeste', 'RS': 'Sul', 'RO': 'Norte', 'RR': 'Norte',
    'SC': 'Sul', 'SP': 'Sudeste', 'SE': 'Nordeste', 'TO': 'Norte'
}

df['Regiao'] = df['Estado'].map(state_to_region)

"""# **Exploratory Data Analisys**

## **Cities Analysis - Economic Level**
"""

#@title Economic Level by Cities
# Criar a figura e os eixos
fig, ax = plt.subplots(figsize=(20, 12))

# Plotar o GeoDataFrame
gdf.plot(
    ax=ax,
    color=color_frame['Color'].to_numpy(),
    edgecolor='gray',
    linewidth=0.2
)

# Definir o título do gráfico
ax.set_title('Municípios Brasileiros', fontsize=15)

# Remover os eixos (opcional, para focar só no mapa)
ax.set_axis_off()

# Adicionar a barra de cores
norm = mpl.colors.BoundaryNorm(boundaries=np.arange(0, 9, 1), ncolors=8)  # Normaliza para a barra de cores
sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
sm.set_array([])  # Define um array vazio para o mapeamento
cbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.02)
cbar.set_label('Nível Econômico', fontsize=12)  # Adicione um rótulo à barra de cores


# Mostrar o mapa
plt.show()

#@title Analise do número de cidades com determinado nivel economico
fig = go.Figure()

nivel_num_cities_cities = df.groupby('Nivel_economico').agg('size').reset_index().rename(columns={0:'Num_Cidades'})

fig.add_trace(
    go.Bar(
        y=nivel_num_cities_cities['Nivel_economico'],
        x=nivel_num_cities_cities['Num_Cidades'],
        text=nivel_num_cities_cities['Num_Cidades'],
        textposition='outside',
        marker_color=px.colors.sequential.Magma[::-1],
        orientation='h'
    )
)

fig.update_layout(
    title='Numero de Cidades por Nivel Economico',
    yaxis_title='Nivel Economico',
    xaxis_title='Numero de Cidades',
    template='plotly_white'
)

fig.show()

"""## **Region Analysis - Economic Level**"""

#@title Number of the cities in each Region
reg_by_city = df.groupby('Regiao').agg('size').reset_index().rename(columns={0:'Num_cidades'})
reg_by_city = reg_by_city.sort_values('Num_cidades')

fig = go.Figure()
fig.add_trace(
    go.Bar(
        x=reg_by_city['Num_cidades'],
        y=reg_by_city['Regiao'],
        orientation='h',
        marker_color=px.colors.sequential.Magma[::-1],
        text=reg_by_city['Num_cidades'],
        textposition='outside'
    )
)

fig.update_layout(
    title="Número de Cidades por Região",
    xaxis_title="Número de Cidades",
    yaxis_title="Região",
    template='plotly_white',
    width=1000,
    height=600,
)

fig.show()

#@title Number of the Cities by Economic Level in each Region
reg_nv_economic_num_cities = df.groupby(['Regiao', 'Nivel_economico']).agg('size').reset_index().rename(columns={0:'Num_cidades'})

fig = go.Figure()

economic_nivel = reg_nv_economic_num_cities['Nivel_economico'].unique()

for nivel in economic_nivel:
  aux_frame = reg_nv_economic_num_cities
  aux_frame = aux_frame[aux_frame['Nivel_economico'] == nivel]

  fig.add_trace(
      go.Bar(
          name=f'Nivel Economico {nivel}',
          x=aux_frame['Regiao'],
          y=aux_frame['Num_cidades'],
          text=aux_frame['Num_cidades'],
          textposition='outside'
      )
  )


fig.update_layout(
    title='Numero de Cidades por Região e Nivel Economico',
    xaxis_title='Região',
    yaxis_title='Numero de Cidades',
    barmode='group',
    template='plotly_white',
    width=1200,
    height=500
)

fig.show()

#@title Porcentagem do Numero de Cidades por Nivel Economico em cada Região
num_cities_by_region = df.groupby('Regiao').agg('size').reset_index().rename(columns={0: 'Num_cidades'})

reg_nv_economic_num_cities_percent = reg_nv_economic_num_cities.copy()

for region in df['Regiao'].unique():
    num_cities = num_cities_by_region.loc[num_cities_by_region['Regiao'] == region, 'Num_cidades'].values[0]

    reg_nv_economic_num_cities_percent.loc[reg_nv_economic_num_cities_percent['Regiao'] == region, 'Num_cidades'] = (
        reg_nv_economic_num_cities_percent.loc[reg_nv_economic_num_cities_percent['Regiao'] == region, 'Num_cidades'] / num_cities
    )

fig = go.Figure()

economic_nivel = reg_nv_economic_num_cities['Nivel_economico'].unique()

for nivel in economic_nivel:
  aux_frame = reg_nv_economic_num_cities_percent
  aux_frame = aux_frame[aux_frame['Nivel_economico'] == nivel]

  fig.add_trace(
      go.Bar(
          name=f'Nivel Economico {nivel}',
          x=aux_frame['Regiao'],
          y=aux_frame['Num_cidades'],
          text=aux_frame['Num_cidades'].apply(lambda x : round(x, 3)),
          textposition='outside'
      )
  )


fig.update_layout(
    title='Porcentagem do Numero de Cidades por Região e Nivel Economico',
    xaxis_title='Região',
    yaxis_title='Numero de Cidades',
    barmode='group',
    template='plotly_white',
    width=1200,
    height=500
)

fig.show()

"""## **State Analysis - Economic Level**"""

#@title Number of the cities by State
state_group = df.groupby(['Estado']).size().reset_index().rename(columns={0:'Num_cidades'})
state_group = state_group.sort_values('Num_cidades', ascending=True)

fig = go.Figure()

fig.add_trace(
    go.Bar(
        x=state_group['Num_cidades'],
        y=state_group['Estado'],
        orientation='h',
        marker=dict(
            color=state_group['Num_cidades'],
            colorscale=px.colors.sequential.Magma[::-1]
        ),
        text=state_group['Num_cidades'],
        textposition='outside'
    )
)

fig.update_xaxes(showgrid=False, showline=True, linewidth=1, linecolor='black')
fig.update_yaxes(showgrid=False, showline=True, linewidth=1, linecolor='black')

fig.update_layout(
    title='Numero de Cidades por Estado',
    yaxis_title='Numero de Cidades',
    template='plotly_white',
    height=800
)

fig.show()

#@title Plot Function
state_group = df.groupby(['Estado', 'Nivel_economico']).agg('size')
state_group = state_group.reset_index().rename(columns={0:'Num_cidades'})

#@title Porcentagem do Numero de Cidades por Nivel Economico em cada Região
num_cities_by_state = df.groupby('Estado').agg('size').reset_index().rename(columns={0: 'Num_cidades'})

state_group_percent = state_group.copy()

for state in df['Estado'].unique():
    num_cities = num_cities_by_state.loc[num_cities_by_state['Estado'] == state, 'Num_cidades'].values[0]

    state_group_percent.loc[state_group_percent['Estado'] == state, 'Num_cidades'] = (
        state_group_percent.loc[state_group_percent['Estado'] == state, 'Num_cidades'] / num_cities
    )

fig = go.Figure()

for nivel_ec in state_group['Nivel_economico'].unique():
  aux_frame = state_group_percent[state_group['Nivel_economico'] == nivel_ec]

  fig.add_trace(
      go.Bar(
          name=f"Nivel {nivel_ec}",
          x=aux_frame['Estado'],
          y=aux_frame['Num_cidades']
      )
  )

fig.update_layout(
    title='Porcentagem Cidades com Nivel Economico por Estado',
    yaxis_title='Numero de Cidades',
    template='plotly_white',
)

fig.update_xaxes(showgrid=False, showline=True, linewidth=1, linecolor='black')
fig.update_yaxes(showgrid=False, showline=True, linewidth=1, linecolor='black')
fig.show()

#@title Summary Economic Level by State

# Cálculos de mediana, moda e média
median_nve_by_state = df.groupby('Estado').agg({'Nivel_economico':'median'}).reset_index().rename(columns={'Estado':'SIGLA'})
mode_nve_by_state = df.groupby('Estado').agg({'Nivel_economico':lambda x: x.mode()[0]}).reset_index().rename(columns={'Estado':'SIGLA'})
mean_nve_by_state = df.groupby('Estado').agg({'Nivel_economico':'mean'}).reset_index().rename(columns={'Estado':'SIGLA'})

# Merge com o GeoDataFrame
median_uf_gdf = pd.merge(uf_gdf, median_nve_by_state, on='SIGLA', how='inner')
mode_uf_gdf = pd.merge(uf_gdf, mode_nve_by_state, on='SIGLA', how='inner')
mean_uf_gdf = pd.merge(uf_gdf, mean_nve_by_state, on='SIGLA', how='inner')

# Criação dos subplots
fig, axes = plt.subplots(1, 3, figsize=(24, 12))  # 3 mapas lado a lado

# Parâmetros de estilo
cmap = 'coolwarm'
edgecolor = 'gray'
linewidth = 0.2

# Função para adicionar barra de cores
def add_colorbar(fig, ax, gdf, column, cmap, label):
    norm = mpl.colors.Normalize(vmin=gdf[column].min(), vmax=gdf[column].max())
    sm = plt.cm.ScalarMappable(cmap=cmap, norm=norm)
    sm.set_array([])
    cbar = fig.colorbar(sm, ax=ax, orientation='vertical', pad=0.02, shrink=0.4)
    cbar.set_label(label, fontsize=8)

# Plot Mediana
median_uf_gdf.plot(
    ax=axes[0],
    column='Nivel_economico',
    cmap=cmap,
    edgecolor=edgecolor,
    linewidth=linewidth
)
axes[0].set_title('Mediana Nível Econômico')
axes[0].set_axis_off()
for x, y, sigla in zip(median_uf_gdf.geometry.centroid.x, median_uf_gdf.geometry.centroid.y, median_uf_gdf['SIGLA']):
    axes[0].text(x, y, sigla, fontsize=10, ha='center', va='center', fontweight='bold')
add_colorbar(fig, axes[0], median_uf_gdf, 'Nivel_economico', cmap, 'Nível Econômico')

# Plot Moda
mode_uf_gdf.plot(
    ax=axes[1],
    column='Nivel_economico',
    cmap=cmap,
    edgecolor=edgecolor,
    linewidth=linewidth
)
axes[1].set_title('Moda Nível Econômico')
axes[1].set_axis_off()
for x, y, sigla in zip(mode_uf_gdf.geometry.centroid.x, mode_uf_gdf.geometry.centroid.y, mode_uf_gdf['SIGLA']):
    axes[1].text(x, y, sigla, fontsize=10, ha='center', va='center', fontweight='bold')
add_colorbar(fig, axes[1], mode_uf_gdf, 'Nivel_economico', cmap, 'Nível Econômico')

# Plot Média
mean_uf_gdf.plot(
    ax=axes[2],
    column='Nivel_economico',
    cmap=cmap,
    edgecolor=edgecolor,
    linewidth=linewidth
)
axes[2].set_title('Média Nível Econômico')
axes[2].set_axis_off()
for x, y, sigla in zip(mean_uf_gdf.geometry.centroid.x, mean_uf_gdf.geometry.centroid.y, mean_uf_gdf['SIGLA']):
    axes[2].text(x, y, sigla, fontsize=10, ha='center', va='center', fontweight='bold')
add_colorbar(fig, axes[2], mean_uf_gdf, 'Nivel_economico', cmap, 'Nível Econômico')

plt.tight_layout()
plt.show()